package bot_order

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/Vovarama1992/go-bagdoor-bot/internal/order"
	"github.com/Vovarama1992/go-bagdoor-bot/internal/storage"
	tele "gopkg.in/telebot.v3"
)

var pendingPhotos = map[int64][]string{} // tgID ‚Üí []photoURL
var awaitingPhotos = map[int64]int{}     // tgID ‚Üí orderID

func HandleSetOrderID() tele.HandlerFunc {
	return func(c tele.Context) error {
		args := strings.Split(c.Message().Text, " ")
		if len(args) != 2 {
			return c.Send("–§–æ—Ä–º–∞—Ç: /setorderid <ID>")
		}

		orderID, err := strconv.Atoi(args[1])
		if err != nil {
			return c.Send("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
		}

		tgID := c.Sender().ID
		awaitingPhotos[tgID] = orderID

		return c.Send(fmt.Sprintf("–ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–∫–∞–∑—É #%d", orderID))
	}
}
func HandlePhotoUpload(s *order.Service, bot *tele.Bot, uploader *storage.S3Uploader) tele.HandlerFunc {
	return func(c tele.Context) error {
		tgID := c.Sender().ID
		orderID, ok := awaitingPhotos[tgID]
		if !ok {
			return c.Send("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: /setorderid <–Ω–æ–º–µ—Ä>")
		}

		photo := c.Message().Photo
		if photo == nil {
			return c.Send("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ")
		}

		file, err := bot.FileByID(photo.FileID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")
		}

		fileName := filepath.Base(file.FilePath)
		ext := strings.ToLower(filepath.Ext(fileName))
		if ext != ".jpg" && ext != ".jpeg" && ext != ".png" {
			return c.Send("‚ùå –¢–æ–ª—å–∫–æ .jpg, .jpeg –∏ .png")
		}

		downloadURL := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", bot.Token, file.FilePath)
		resp, err := http.Get(downloadURL)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
		}
		defer resp.Body.Close()

		content, err := io.ReadAll(resp.Body)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª")
		}

		s3url, err := uploader.UploadOrderMedia(orderID, fileName, content)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: %v", err)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")
		}

		pendingPhotos[tgID] = append(pendingPhotos[tgID], s3url)
		count := len(pendingPhotos[tgID])

		if count > 5 {
			delete(pendingPhotos, tgID)
			delete(awaitingPhotos, tgID)
			return c.Send("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –î–æ–ø—É—Å—Ç–∏–º–æ –Ω–µ –±–æ–ª–µ–µ 5. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /setorderid.")
		}

		if count < 2 {
			return c.Send(fmt.Sprintf("üì∑ –§–æ—Ç–æ %d/5 –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ï—â—ë –º–∏–Ω–∏–º—É–º %d", count, 2-count))
		}

		// –í—Å—ë –æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		urls := pendingPhotos[tgID]

		if err := s.AddMediaURLs(ctx, orderID, urls); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: %v", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
		}

		if err := s.UpdateModerationStatus(ctx, orderID, order.StatusApproved); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err)
		}

		order, err := s.Repo.GetOrderByID(ctx, orderID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: %v", err)
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
		}

		msg := fmt.Sprintf(`üì¶ %s
–ù–∞–∑–≤–∞–Ω–∏–µ: %s
–û–ø–∏—Å–∞–Ω–∏–µ: %s
–û—Ç–∫—É–¥–∞: %s
–ö—É–¥–∞: %s
–° %s –ø–æ %s
–°—Ç–æ–∏–º–æ—Å—Ç—å: %s
–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: %.0f ‚ÇΩ

‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω ‚úÖ`,
			order.OrderNumber,
			order.Title,
			order.Description,
			order.OriginCity,
			order.DestinationCity,
			order.StartDate.Format("02.01.2006"),
			order.EndDate.Format("02.01.2006"),
			formatNullablePrice(order.Cost),
			order.Reward,
		)

		delete(pendingPhotos, tgID)
		delete(awaitingPhotos, tgID)

		return c.Send(msg, &tele.ReplyMarkup{
			InlineKeyboard: [][]tele.InlineButton{
				{{Text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é", Data: "menu_back"}},
			},
		})
	}
}

func formatNullablePrice(p *float64) string {
	if p == nil {
		return "‚Äî"
	}
	return fmt.Sprintf("%.0f ‚ÇΩ", *p)
}
