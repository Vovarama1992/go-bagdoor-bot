package user

import (
	tele "gopkg.in/telebot.v3"
)

// –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ tgID –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
func StartHandler(s *Service) tele.HandlerFunc {
	return func(c tele.Context) error {
		from := c.Sender()

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º tgID
		ctx := c
		user, err := s.GetByTgID(ctx, from.ID)
		if err == nil && user != nil {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			return c.Send(
				"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üî•\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞",
				openAppMarkup(),
			)
		}

		// –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
		return c.Send(
			`–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç Bagdoor‚ö°

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω(–∞) –Ω–∞ –Ω–∞—à [—á–∞—Ç](https://t.me/+s4aQ9RU-K9JkZmNi) –∏ [–∫–∞–Ω–∞–ª](https://t.me/bagdoor) ‚Äî —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.

–ü—Ä–æ–¥–æ–ª–∂–∞—è, —Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.`,
			subscribeMarkup(),
		)
	}
}

// –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func SubscribeHandler(s *Service) tele.HandlerFunc {
	return func(c tele.Context) error {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª
		if !isSubscribed(c) {
			return c.Send("–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —á–∞—Ç –∏ –∫–∞–Ω–∞–ª.")
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		return c.Send(
			"–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
			&tele.SendOptions{ReplyMarkup: phoneMarkup()},
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func PhoneHandler(s *Service) tele.HandlerFunc {
	return func(c tele.Context) error {
		contact := c.Message().Contact

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		if contact.UserID != c.Sender().ID {
			return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä.")
		}

		// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
		ctx := c

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏
		newUser := &User{
			TgID:        c.Sender().ID,
			TgUsername:  c.Sender().Username,
			FirstName:   c.Sender().FirstName,
			LastName:    c.Sender().LastName,
			PhoneNumber: contact.PhoneNumber,
		}

		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if err := s.RegisterUser(ctx, newUser); err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
		}

		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		return c.Send(
			"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üî•\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º Bagdoor: —Ä–∞–∑–º–µ—â–∞—Ç—å —Ä–µ–π—Å—ã, –∑–∞–∫–∞–∑—ã –∏ —Å–æ–≤–µ—Ä—à–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏. –£–¥–∞—á–∏!",
			openAppMarkup(),
		)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
func isSubscribed(c tele.Context) bool {
	// –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API
	// –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
	return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
func subscribeMarkup() *tele.ReplyMarkup {
	btnSubscribed := tele.Btn{Text: "‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"}
	btnPhone := tele.Btn{Contact: true, Text: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"}

	markup := &tele.ReplyMarkup{}
	markup.Reply(
		markup.Row(btnSubscribed),
		markup.Row(btnPhone),
	)
	return markup
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func openAppMarkup() *tele.ReplyMarkup {
	markup := &tele.ReplyMarkup{}
	btn := markup.URL("–û—Ç–∫—Ä—ã—Ç—å", "https://t.me/bagdoorapp_bot/app")
	markup.Reply(markup.Row(btn))
	return markup
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
func phoneMarkup() *tele.ReplyMarkup {
	btnPhone := tele.Btn{Contact: true, Text: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"}

	markup := &tele.ReplyMarkup{}
	markup.Reply(
		markup.Row(btnPhone),
	)
	return markup
}
